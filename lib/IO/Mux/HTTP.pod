=head1 NAME

IO::Mux::HTTP - HTTP protocol on IO::Mux

=head1 INHERITANCE

 IO::Mux::HTTP
   is a IO::Mux::Net::TCP
   is a IO::Mux::Handler::Read
   is a IO::Mux::Handler

   IO::Mux::Net::TCP also extends IO::Mux::Handler::Write
   is a IO::Mux::Handler::Write
   is a IO::Mux::Handler

 IO::Mux::HTTP is extended by
   IO::Mux::HTTP::Client
   IO::Mux::HTTP::Service

=head1 SYNOPSIS

  # base-class for IO::Mux::HTTP::Service or Client

=head1 METHODS

=head2 Constructors

=over 4

=item IO::Mux::HTTP-E<gt>B<new>(OPTIONS)

 -Option     --Defined in     --Default
  add_headers                   []
  fh           IO::Mux::Handler  <required>
  name         IO::Mux::Handler  'tcp $host:$port'
  read_size    IO::Mux::Handler::Read  32768
  socket       IO::Mux::Net::TCP  <required>
  write_size   IO::Mux::Handler::Write  4096

=over 2

=item add_headers => ARRAY

These headers will be added to each message sent. The parameter
is an ARRAY of field-name/field-content pairs.

=item fh => FILEHANDLE

=item name => STRING

=item read_size => INTEGER

=item socket => IO::Socket::INET

=item write_size => INTEGER

=back

=item IO::Mux::HTTP-E<gt>B<open>(MODE, WHAT, OPTIONS)
See L<IO::Mux::Handler/"Constructors">

=item IO::Mux::HTTP-E<gt>B<open>(MODE, WHAT, OPTIONS)
See L<IO::Mux::Handler/"Constructors">

=back

=head2 Accessors

=over 4

=item $obj-E<gt>B<fh>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<fh>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<fileno>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<fileno>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<mux>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<mux>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<name>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<name>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<readSize>([INTEGER])
See L<IO::Mux::Handler::Read/"Accessors">

=item $obj-E<gt>B<socket>
See L<IO::Mux::Net::TCP/"Accessors">

=item $obj-E<gt>B<startTime>

Returns a HASH with some basic information about the client, not
the socket itself.

=item $obj-E<gt>B<usesSSL>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<usesSSL>
See L<IO::Mux::Handler/"Accessors">

=item $obj-E<gt>B<writeSize>([INTEGER])
See L<IO::Mux::Handler::Write/"Accessors">

=back

=head2 User interface

=head3 Connection

=over 4

=item $obj-E<gt>B<close>([CALLBACK])
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<close>([CALLBACK])
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<shutdown>((0|1|2))
See L<IO::Mux::Net::TCP/"Connection">

=item $obj-E<gt>B<timeout>([TIMEOUT])
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<timeout>([TIMEOUT])
See L<IO::Mux::Handler/"Connection">

=back

=head3 Reading

=over 4

=item $obj-E<gt>B<readline>(CALLBACK)
See L<IO::Mux::Handler::Read/"Reading">

=item $obj-E<gt>B<slurp>(CALLBACK)
See L<IO::Mux::Handler::Read/"Reading">

=back

=head3 Writing

=over 4

=item $obj-E<gt>B<print>(STRING|SCALAR|LIST|ARRAY)
See L<IO::Mux::Handler::Write/"Writing">

=item $obj-E<gt>B<printf>(FORMAT, PARAMS)
See L<IO::Mux::Handler::Write/"Writing">

=item $obj-E<gt>B<say>(STRING|SCALAR|LIST|ARRAY)
See L<IO::Mux::Handler::Write/"Writing">

=item $obj-E<gt>B<write>(SCALAR, [MORE])
See L<IO::Mux::Handler::Write/"Writing">

=back

=head2 Multiplexer

=head3 Connection

=over 4

=item $obj-E<gt>B<mux_init>(MUX, [HANDLER])
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<mux_init>(MUX, [HANDLER])
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<mux_remove>
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<mux_remove>
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<mux_timeout>
See L<IO::Mux::Handler/"Connection">

=item $obj-E<gt>B<mux_timeout>
See L<IO::Mux::Handler/"Connection">

=back

=head3 Reading

=over 4

=item $obj-E<gt>B<mux_eof>
See L<IO::Mux::Net::TCP/"Multiplexer">

=item $obj-E<gt>B<mux_except_flagged>(FILENO)
See L<IO::Mux::Handler/"Reading">

=item $obj-E<gt>B<mux_except_flagged>(FILENO)
See L<IO::Mux::Handler/"Reading">

=item $obj-E<gt>B<mux_input>(BUFFER)
See L<IO::Mux::Handler::Read/"Reading">

=item $obj-E<gt>B<mux_read_flagged>(FILENO)
See L<IO::Mux::Handler/"Reading">

=item $obj-E<gt>B<mux_read_flagged>(FILENO)
See L<IO::Mux::Handler/"Reading">

=back

=head3 Writing

=over 4

=item $obj-E<gt>B<mux_outbuffer_empty>
See L<IO::Mux::Handler::Write/"Writing">

=item $obj-E<gt>B<mux_output_waiting>
See L<IO::Mux::Handler::Write/"Writing">

=item $obj-E<gt>B<mux_write_flagged>(FILENO)
See L<IO::Mux::Handler/"Writing">

=item $obj-E<gt>B<mux_write_flagged>(FILENO)
See L<IO::Mux::Handler/"Writing">

=back

=head3 Service

=head2 Helpers

=over 4

=item $obj-E<gt>B<extractSocket>(HASH)

=item IO::Mux::HTTP-E<gt>B<extractSocket>(HASH)
See L<IO::Mux::Handler/"Helpers">

=item $obj-E<gt>B<extractSocket>(HASH)

=item IO::Mux::HTTP-E<gt>B<extractSocket>(HASH)
See L<IO::Mux::Handler/"Helpers">

=item $obj-E<gt>B<fdset>(STATE, READ, WRITE, ERROR)
See L<IO::Mux::Handler/"Helpers">

=item $obj-E<gt>B<fdset>(STATE, READ, WRITE, ERROR)
See L<IO::Mux::Handler/"Helpers">

=item $obj-E<gt>B<show>
See L<IO::Mux::Handler/"Helpers">

=item $obj-E<gt>B<show>
See L<IO::Mux::Handler/"Helpers">

=back

=head2 HTTP protocol

=over 4

=item $obj-E<gt>B<closeConnection>

=item $obj-E<gt>B<sendMessage>(MESSAGE, CALLBACK)

Used by C<sendRequest()> (client) and C<sendResponse()> (server) to
send a MESSAGE. When the message has arrived, the CALLBACK will we
called.

=back

=head1 SEE ALSO

This module is part of IO-Mux-HTTP distribution version 0.10,
built on January 26, 2011. Website: F<http://perl.overmeer.net/>
All modules in this suite:
L</Any::Daemon>,
L</IO::Mux>, and
L</IO::Mux::HTTP>.

Please post questions or ideas to F<perl@overmeer.net>

=head1 LICENSE

Copyrights 2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

